grammar arith_1 = <{
  %{
  type ast = 
      | Add of ast * ast 
      | Mul of ast * ast 
      | Num of int 
  %}

  expr: 
        t = term "+" e = expr { Add(t, e) }
      / t = term { t }
}>

grammar arith_2 = <{
  term: 
        a = atom "*" t = term { Mul(a, t) }
      / a = atom { a }

  atom: 
        n = number { Num( n ) }
      / "(" e = expr ")" { e }
    
  number: n = r"[1-9][0-9]*" { int_of_string n }
}>

grammar arith = arith_1 + arith_2 
