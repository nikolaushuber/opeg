%{
type ast = 
    | Add of ast * ast 
    | Mul of ast * ast 
    | Num of int 
%}

description = "Grammar for simple arithmetic expressions"
whitespace = [ "\n", "\t", " ", "\r" ]
start = expr 

%% 
/* These are the lexing rules */

number: n = r"[1-9][0-9]*" { int_of_string n }

%% 
/* These are the grammar rules. Whitespace recognition is automatically 
   inserted between all symbols 
*/ 

expr: 
      add:  t = term "+" e = expr { Add(t, e) }
    / term: t = term { t }

term: 
      mul:  a = atom "*" t = term { Mul(a, t) }
    / atom: a = atom { a }

atom: 
      num:   n = number { Num( n ) }
    / subex: "(" e = expr ")" { e }
